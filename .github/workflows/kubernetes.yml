#TestDeploy
name: Deploy to Amazon ECS

on:
  push:
    branches:
      - main

env:
  AWS_REGION: eu-central-1                
  ECR_REPOSITORY: elon-mask 
  RUN_NUMBER: ${{ github.run_number }}
  IMAGE_TAG: ${{ github.sha }}

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
            
    - name: Push frontend docker image to ECR
      id: build-image
      working-directory: ./frontend
      env: 
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
          docker build -t ${{ env.ECR_REGISTRY}}/${{ env.ECR_REPOSITORY}}:frontend${{ env.IMAGE_TAG }} .
          docker push ${{ env.ECR_REGISTRY}}/${{ env.ECR_REPOSITORY}}:frontend${{ env.IMAGE_TAG }}
          echo "::set-output name=image::${{ env.ECR_REGISTRY}}/${{ env.ECR_REPOSITORY}}:frontend${{ env.IMAGE_TAG }}"
    
    - name: Push relay docker image to ECR
      id: build-relay
      working-directory: ./relay
      env: 
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
          docker build -t ${{ env.ECR_REGISTRY}}/${{ env.ECR_REPOSITORY}}:relay${{ env.IMAGE_TAG }} .
          docker push  ${{ env.ECR_REGISTRY}}/${{ env.ECR_REPOSITORY}}:relay${{ env.IMAGE_TAG }}
          echo "::set-output name=image::${{ env.ECR_REGISTRY}}/${{ env.ECR_REPOSITORY}}:relay${{ env.IMAGE_TAG }}"

    - name: install kubectl
      run: |
          curl -L -o /usr/bin/kubectl https://s3.us-west-2.amazonaws.com/amazon-eks/1.22.6/2022-03-09/bin/linux/amd64/kubectl
          chmod +x /usr/bin/kubectl
          cat ${{ secrets.KUBE_CONFIG_DATA }} | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig
          kubectl create secret docker-registry regcred \
             --docker-server=$ECR_REGISTRY \
             --docker-username=AWS \
             --docker-password=$(aws ecr get-login-password) \
             --namespace=health-check
  
     - name: push db to kubernetes cluster
      env: 
        DB_SECRET: ${{ secrets.DB_SECRET }}
      working-directory: ./deployments/db
      run: |
          sed 's/# DBPWPLACEHOLDER/${{ env.DB_SECRET}}/' db-deployment.yaml
          kubectl apply -f .
          kubectl wait --for=condition=available --timout=60s --all deployments


     - name: push dbprep to kubernetes cluster
      env: 
        DB_SECRET: ${{ secrets.DB_SECRET }}
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      working-directory: ./deployments/backend
      run: |
          kubectl apply -f dbprep-service.yaml
          sed 's/# DBPWPLACEHOLDER/${{ env.DB_SECRET}}/' dbprep-deployment.yaml
          sed 's/# IMGPLACEHOLDER/${{ env.ECR_REGISTRY}}/${{ env.ECR_REPOSITORY}}:relay${{ env.IMAGE_TAG }}/' dbprep-deployment.yaml
          kubectl apply -f dbprep-deployment.yaml

     - name: push relay to kubernetes cluster
      env: 
        DB_SECRET: ${{ secrets.DB_SECRET }}
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      working-directory: ./deployments/backend
      run: |
          kubectl apply -f relay-service.yaml
          sed 's/# DBPWPLACEHOLDER/${{ env.DB_SECRET}}/' relay-deployment.yaml
          sed 's/# IMGPLACEHOLDER/${{ env.ECR_REGISTRY}}/${{ env.ECR_REPOSITORY}}:relay${{ env.IMAGE_TAG }}/' relay-deployment.yaml
          kubectl apply -f relay-deployment.yaml
          kubectl wait --for=condition=available --timout=60s --all deployments

    - name: push frontend to kubernetes cluster
      env: 
        DB_SECRET: ${{ secrets.DB_SECRET }}
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      working-directory: ./deployments
      run: |
          kubectl apply -f frontend-service.yaml
          sed 's/# IMGPLACEHOLDER/${{ env.ECR_REGISTRY}}/${{ env.ECR_REPOSITORY}}:frontend${{ env.IMAGE_TAG }}/' frontend-deployment.yaml
          kubectl apply -f frontend-deployment.yaml

