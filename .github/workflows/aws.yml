name: Deploy to Amazon ECS

on:
  push:
    branches:
      - main

env:
  AWS_REGION: eu-central-1                
  ECR_REPOSITORY: elon-mask 
  RUN_NUMBER: ${{ github.run_number }}

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      
    - name: Delete previous cloud-deployement
      if: ${{ env.RUN_NUMBER > 1}}
      run : |
          OLD_RUN=`expr ${{ env.RUN_NUMBER }} - 1`
          echo "old number: $OLD_RUN "
          echo "deleting.."
          aws cloudformation delete-stack --stack-name compose-infrastructure$OLD_RUN
          aws cloudformation delete-stack --stack-name application
          aws cloudformation wait stack-delete-complete --stack-name application

      
    - name: adding template infrastructure
      working-directory: ./infrastructure
      run: |
           aws cloudformation create-stack --stack-name compose-infrastructure${{ env.RUN_NUMBER }} --template-body file://cloudformation.yaml --capabilities CAPABILITY_IAM 
           aws cloudformation wait stack-create-complete --stack-name  compose-infrastructure${{ env.RUN_NUMBER }}            
           
    - name: Push frontend docker image
      id: build-image
      working-directory: ./frontend
      env: 
        IMAGE_TAG: ${{ github.sha }}
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:frontend$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:frontend$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:frontend$IMAGE_TAG"
    
    - name: Push relay docker image
      id: build-relay
      working-directory: ./relay
      env: 
        IMAGE_TAG: ${{ github.sha }}
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:relay$IMAGE_TAG .
          docker push  $ECR_REGISTRY/$ECR_REPOSITORY:relay$IMAGE_TAG
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:relayP$IMAGE_TAG .
          docker push  $ECR_REGISTRY/$ECR_REPOSITORY:relayP$IMAGE_TAG
          echo "::set-output name=image:: $ECR_REGISTRY/$ECR_REPOSITORY:relay$IMAGE_TAG"
        
      
    - name: set environment variables
      run: |
          echo "$(aws cloudformation describe-stacks --stack-name compose-infrastructure${{ env.RUN_NUMBER }} --query "Stacks[0].Outputs[?OutputKey=='ClusterName'].OutputValue" --output text)"
          echo "$(aws cloudformation describe-stacks --stack-name compose-infrastructure${{ env.RUN_NUMBER }} --query "Stacks[0].Outputs[?OutputKey=='LoadbalancerId'].OutputValue" --output text)"
          echo "$(aws cloudformation describe-stacks --stack-name compose-infrastructure${{ env.RUN_NUMBER }} --query "Stacks[0].Outputs[?OutputKey=='VpcId'].OutputValue" --output text)"
          echo "AWS_VPC=$(aws cloudformation describe-stacks --stack-name compose-infrastructure${{ env.RUN_NUMBER }} --query "Stacks[0].Outputs[?OutputKey=='VpcId'].OutputValue" --output text)" >> $GITHUB_ENV
          echo "AWS_ECS_CLUSTER=$(aws cloudformation describe-stacks --stack-name compose-infrastructure${{ env.RUN_NUMBER }} --query "Stacks[0].Outputs[?OutputKey=='ClusterName'].OutputValue" --output text)" >> $GITHUB_ENV
          echo "AWS_ELB=$(aws cloudformation describe-stacks --stack-name compose-infrastructure${{ env.RUN_NUMBER }} --query "Stacks[0].Outputs[?OutputKey=='LoadbalancerId'].OutputValue" --output text)" >> $GITHUB_ENV
        
          
    - name: run docker compose
      env: 
        DB_SECRET: ${{ secrets.DB_SECRET }}
        DB_USER: ${{ secrets.DB_USER }}
        IMAGE_TAG: ${{ github.sha }}
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        echo $AWS_ELB
        curl -L https://raw.githubusercontent.com/docker/compose-cli/main/scripts/install/install_linux.sh | sh
        echo "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
        docker context create ecs elonmask --from-env
        docker context use elonmask
        docker compose up -d

